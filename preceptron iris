                                                                                                                                                import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define Perceptron class
class Perceptron:
    def _init_(self, learning_rate=0.01, n_iters=1000):
        self.lr = learning_rate
        self.n_iters = n_iters
        self.activation_func = self._unit_step_func
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0
        y_ = np.array([1 if i == 1 else -1 for i in y])

        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                predicted = self.predict(x_i)
                update = self.lr * (y_[idx] - predicted)
                self.weights += update * x_i
                self.bias += update

    def predict(self, X):
        linear_model = np.dot(X, self.weights) + self.bias
        y_predicted = self.activation_func(linear_model)
        return y_predicted

    def _unit_step_func(self, x):
        return np.where(x>=0, 1, -1)

# Create Perceptron object and train
perceptron = Perceptron()
perceptron.fit(X_train, y_train)

# Make predictions on test set
y_pred = [perceptron.predict(x) for x in X_test]

# Convert predictions to Iris class labels
y_pred_class = [1 if i == 1 else 0 if i == -1 else 2 for i in y_pred]

# Evaluate accuracy
accuracy = accuracy_score(y_test, y_pred_class)
print("Perceptron Accuracy:", accuracy)
